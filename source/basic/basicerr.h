#pragma once



// 
// Error codes
//
typedef enum basic_err {
    BASIC_ERR_NONE = 0,
    BASIC_ERR_OUT_OF_MEMORY,
    BASIC_ERR_NETWORK_ERROR,
    BASIC_ERR_KEYWORD_TOO_LONG,
    BASIC_ERR_UNKNOWN_KEYWORD,
    BASIC_ERR_INVALID_TOKEN,
    BASIC_ERR_EXTRA_CHARS,
    BASIC_ERR_EXPECTED_EQUAL,
    BASIC_ERR_EXPECTED_TO,
    BASIC_ERR_EXPECTED_STEP,
    BASIC_ERR_EXPECTED_THEN,                    // 10
    BASIC_ERR_EXPECTED_SEMICOLON,
    BASIC_ERR_EXPECTED_VAR,
    BASIC_ERR_EXPECTED_OPENPAREN,
    BASIC_ERR_EXPECTED_CLOSEPAREN,
    BASIC_ERR_EXPECTED_QUOTE,
    BASIC_ERR_EXPECTED_IDENTIFIER,
    BASIC_ERR_EXPECTED_COMMA,
    BASIC_ERR_EXPECTED_GOTO_GOSUB,
    BASIC_ERR_VARIABLE_TOO_LONG,
    BASIC_ERR_NUMBER_TOO_LONG,                  // 20
    BASIC_ERR_STRING_TOO_LONG,
    BASIC_ERR_UNTERMINATED_STRING,
    BASIC_ERR_NO_SUCH_VARIABLE,
    BASIC_ERR_TYPE_MISMATCH,
    BASIC_ERR_SDCARD_ERROR,
    BASIC_ERR_COUNT_NOT_OPEN,
    BASIC_ERR_IO_ERROR,
    BASIC_ERR_INVALID_OPERATOR,
    BASIC_ERR_TOO_COMPLEX,
    BASIC_ERR_NOT_ALLOWED,                      // 30
    BASIC_ERR_BAD_INTEGER_VALUE,
    BASIC_ERR_BAD_NUMBER_VALUE,
    BASIC_ERR_INVALID_DIMENSION, 
    BASIC_ERR_INVALID_CHAR,
    BASIC_ERR_TOO_MANY_DIMS,
    BASIC_ERR_DIVIDE_ZERO,
    BASIC_ERR_NOT_ARRAY,
    BASIC_ERR_DIM_MISMATCH,
    BASIC_ERR_BAD_ARG_COUNT,
    BASIC_ERR_TRNG_FAILED,                      // 40
    BASIC_ERR_UNBOUND_LOCAL_VAR,
    BASIC_ERR_ARG_COUNT_MISMATCH,
    BASIC_ERR_INVALID_ARG_VALUE,
    BASIC_ERR_UNMATCHED_NEXT,
    BASIC_ERR_EXPECTED_DASH,
    BASIC_ERR_NO_GOSUB,
    BASIC_ERR_INVALID_LINE_NUMBER,
    BASIC_ERR_INVALID_VARNAME,
    BASIC_ERR_TOO_MANY_STRING_VARS,
    BASIC_ERR_NO_DATA,

} basic_err_t ;

const char *basic_err_to_string(basic_err_t err) ;